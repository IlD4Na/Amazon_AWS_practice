Instructions for using sensitive data without making it visible in the code,
according to Good Practice.

Sensitive data can be stored in an environment variable.
This means that we create a variable containing our sensitive data
inside a file with the .env extension.

For example, in this case I used a file called redshift_credentials.env
and inside I simply wrote:


REDSHIFT_PASS=inserted_password
ALTRA_PASS=another_inserted_password

In this way, I save the environment variable REDSHIFT_PASS which I can call
without showing what is hidden inside it.

To retrieve it, I must use load_dotenv â†’ from dotenv import load_dotenv.
Obviously, I first have to install it via pip install python-dotenv.

This function allows me to load the environment variable by specifying
the path of the file that contains it, like this:


load_dotenv(dotenv_path='.venv/redshift_credentials.env') 

Finally, I can simply create a variable and assign it that value in this way:

password = os.getenv('REDSHIFT_PASS')
